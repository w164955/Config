{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "brown",
    "glyph" : "trash-alt"
  },
  "name" : "Clean Files 2",
  "script" : "const fm = FileManager.local()\n\n\/**\n * @param {object} options\n * @param {string} options.title\n * @param {File[]} options.list\n *\/\nconst presentList = async (options) => {\n  const { title, list } = options\n  const webView = new WebView()\n  const css =\n  `:root {\n    --color-primary: #007aff;\n    --divider-color: rgba(60,60,67,0.36);\n    --card-background: #fff;\n    --card-radius: 10px;\n    --list-header-color: rgba(60,60,67,0.6);\n  }\n  * {\n    -webkit-user-select: none;\n    user-select: none;\n  }\n  body {\n    margin: 0;\n    -webkit-font-smoothing: antialiased;\n    font-family: \"SF Pro Display\",\"SF Pro Icons\",\"Helvetica Neue\",\"Helvetica\",\"Arial\",sans-serif;\n    accent-color: var(--color-primary);\n  }\n  .header {\n    position: sticky;\n    z-index: 99;\n    top: 0;\n    left: 0;\n    right: 0;\n    height: 3.5rem;\n    text-align: center;\n    background: var(--card-background);\n    display: flex;\n    align-items: center;\n    padding: 0 1rem;\n  }\n  .header__left,\n  .header__right {\n    flex: 1;\n  }\n  .header__left {\n    text-align: left;\n  }\n  .header__right {\n    text-align: right;\n  }\n  .select-all,\n  .select {\n    font-size: 0.875rem;\n  }\n  .list {\n    padding: 0;\n    margin: 0;\n    list-style: none;\n  }\n  .icon-yuan {\n    color: #666;\n  }\n  .icon-gouxuan {\n    color: var(--color-primary);\n  }\n  .item {\n    padding-left: 1rem;\n  }\n  .item,\n  .item__body {\n    flex: 1;\n    display: flex;\n    align-items: center;\n  }\n  .item__selection {\n    font-size: 0;\n    transition: all .3s;\n  }\n  .item__icon {\n    margin-right: 0.625rem;\n    font-size: 2.5rem;\n    color: var(--color-primary);\n  }\n  .item__name {\n    font-size: 1.125em;\n    color: #222;\n  }\n  .item[data-is-directory=\"1\"] .item__name {\n    color: var(--color-primary);\n  }\n  .item__content {\n    flex: 1;\n    padding: 0.75rem 0;\n    border-bottom: 0.5px solid var(--divider-color);\n  }\n  .item__info {\n    margin-top: 0.3rem;\n    font-size: 0.75rem;\n    color: #666;\n  }\n  .list-select .item__selection {\n    margin-right: 0.5rem;\n    font-size: 1.5rem;\n  }\n  .btn-del {\n    position: fixed;\n    z-index: 10;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    margin: 0;\n    display: block;\n    width: 100%;\n    height: 2.75rem;\n    border: none;\n    font-size: 1.125rem;\n    color: #fff;\n    background: indianred;\n    padding: 0;\n    transform: translateY(100%);\n    transition: all 0.25s;\n  }\n  .btn-del.show {\n    transform: translateY(0);\n  }\n  .bottom-holder {\n    margin-top: 2rem;\n    box-sizing: content-box;\n    height: 2.75rem;\n  }\n  @media (prefers-color-scheme: dark) {\n    :root {\n      --divider-color: rgba(84,84,88,0.65);\n      --card-background: #1c1c1e;\n      --list-header-color: rgba(235,235,245,0.6);\n    }\n    body {\n      background: #000;\n      color: #fff;\n    }\n    .item__name {\n      color: white;\n    }\n    .item[data-is-directory=\"1\"] .item__name {\n      color: #157EFB;\n    }\n  }`\n\n  const js =\n  `window.invoke = (code, data) => {\n    window.dispatchEvent(\n      new CustomEvent(\n        'JBridge',\n        { detail: { code, data } }\n      )\n    )\n  }\n\n  const isSelectMode = () => {\n    return document.querySelector('.list').classList.contains('list-select')\n  }\n\n  const removeItems = (items) => {\n    const list = document.querySelector('.list')\n    for (const item of items) {\n      const el = document.querySelector(\\`.item[data-name=\"\\${item.name}\"]\\`)\n      el.parentNode.remove()\n    }\n  }\n  \n  document.querySelector('.select').addEventListener('click', (e) => {\n    \/** @type {HTMLButtonElement} *\/\n    const target = e.currentTarget\n    target.innerText = target.innerText === '选择' ? '完成' : '选择'\n  \n    document.querySelector('.select-all').toggleAttribute('hidden')\n    document.querySelector('.list').classList.toggle('list-select')\n    document.querySelector('.btn-del').classList.toggle('show')\n  })\n  \n  document.querySelectorAll('.item')\n    .forEach((el) => {\n      el.addEventListener('click', (e) => {\n        const target = e.currentTarget\n        if (isSelectMode()) {\n          \/** @type {HTMLElement} *\/\n          const selection = target.querySelector('.item__selection')\n          const isSelected = selection.classList.contains('icon-gouxuan')\n          if (isSelected) {\n            selection.classList.replace('icon-gouxuan', 'icon-yuan')\n          } else {\n            selection.classList.replace('icon-yuan', 'icon-gouxuan')\n          }\n        } else {\n          const { name } = target.dataset\n          invoke('view', target.dataset)\n        }\n      })\n    })\n  \n  document.querySelector('.select-all').addEventListener('click', (e) => {\n    \/** @type {HTMLButtonElement} *\/\n    const target = e.currentTarget\n    const isSelected = target.innerText === '取消全选'\n    target.innerText = isSelected ? '全选' : '取消全选'\n    document.querySelectorAll('.item__selection').forEach((e) => {\n      if (isSelected) {\n        e.classList.replace('icon-gouxuan', 'icon-yuan')\n      } else {\n        e.classList.replace('icon-yuan', 'icon-gouxuan')\n      }\n    })\n  })\n  \n  document.querySelector('.btn-del').addEventListener('click', () => {\n    const selectedItems = []\n    for (const el of document.querySelectorAll('.icon-gouxuan')) {\n      selectedItems.push({ ...el.parentNode.dataset })\n    }\n    invoke('remove', selectedItems)\n  })\n\n  window.addEventListener('JWeb', (e) => {\n    const { code, data } = e.detail\n    console.log('收到事件了')\n    switch (code) {\n      case 'remove-success':\n        removeItems(JSON.parse(data))\n        break;\n    }\n  })\n  `\n\n  const html =\n  `<!DOCTYPE html>\n  <html lang=\"zh-CN\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\">\n    <title>${title}<\/title>\n    <link rel=\"stylesheet\" href=\"\/\/at.alicdn.com\/t\/c\/font_3772663_0lvf7sx0ati.css\">\n    <style>${css}<\/style>\n  <\/head>\n  <body>\n    <div class=\"header\">\n      <div class=\"header__left\"><button class=\"select-all\" hidden>全选<\/button><\/div>\n      <h3>${title}<\/h3>\n      <div class=\"header__right\"><button class=\"select\">选择<\/button><\/div>\n    <\/div>\n    <ul class=\"list\">\n    ${list.map((file) => (\n      `<li>\n        <div class=\"item\" data-name=\"${file.name}\"\n          data-is-directory=\"${Number(file.isDirectory)}\"\n          data-file-path=\"${file.filePath}\"\n        >\n          <i class=\"iconfont icon-yuan item__selection\"><\/i>\n          <div class=\"item__body\">\n            <i class=\"iconfont ${file.isDirectory ? 'icon-folder-close' : 'icon-doc'} item__icon\"><\/i>\n            <div class=\"item__content\">\n              <div class=\"item__name\">${file.name}<\/div>\n              ${file.info ? `<div class=\"item__info\">${file.info}<\/div>` : ''}\n            <\/div>\n          <\/div>\n        <\/div>\n      <\/li>`\n    )).join('')}\n    <\/ul>\n    <div class=\"bottom-holder\"><\/div>\n    <div class=\"fixed-bottom\">\n      <button class=\"btn-del\">删除<\/button>\n    <\/div>\n    <script>${js}<\/script>\n  <\/body>\n  <\/html>`\n  await webView.loadHTML(html, 'https:\/\/www.imarkr.com')\n\n  const view = async (data) => {\n    const { isDirectory, filePath, name } = data\n    if (Number(isDirectory)) {\n      const list = fm.listContents(filePath)\n        .map((name) => {\n          const path = fm.joinPath(filePath, name)\n          return {\n            name,\n            info: `${fm.modificationDate(path).toLocaleString()}`,\n            filePath: path,\n            isDirectory: FileManager.local().isDirectory(path)\n          }\n        })\n      presentList({\n        title: name,\n        list\n      })\n    } else {\n      if (!fm.isFileDownloaded(filePath)) {\n        await fm.downloadFileFromiCloud(filePath)\n      }\n      try {\n        const image = fm.readImage(filePath)\n        QuickLook.present(image, false)\n        return\n      } catch (e) {\n        console.warn(e)\n      }\n      try {\n        const text = fm.readString(filePath)\n        QuickLook.present(text)\n      } catch (e) {\n        console.warn(e)\n      }\n    }\n  }\n\n  const remove = async (list) => {\n    for (const file of list) {\n      fm.remove(file.filePath)\n    }\n    webView.evaluateJavaScript(\n      `window.dispatchEvent(new CustomEvent(\n        'JWeb',\n        { detail: {\n          code: 'remove-success',\n          data: '${JSON.stringify(list)}'\n        } }\n      ))`,\n      false\n    )\n  }\n\n  const injectListener = async () => {\n    const event = await webView.evaluateJavaScript(\n      `(() => {\n        const controller = new AbortController()\n        const listener = (e) => {\n          completion(e.detail)\n          controller.abort()\n        }\n        window.addEventListener(\n          'JBridge',\n          listener,\n          { signal: controller.signal }\n        )\n      })()`,\n      true\n    ).catch((err) => {\n      console.error(err)\n      throw err\n    })\n    const { code, data } = event\n    switch (code) {\n      case 'view':\n        view(data)\n        break\n      case 'remove':\n        remove(data).catch((e) => console.error(e))\n        break\n    }\n    injectListener()\n  }\n\n  injectListener().catch((e) => {\n    console.error(e)\n    throw e\n  })\n  webView.present()\n}\n\npresentList({\n  title: '缓存清理',\n  list: [\n    {\n      name: '本地缓存',\n      filePath: FileManager.local().cacheDirectory(),\n      isDirectory: true\n    },\n    {\n      name: '本地文档',\n      filePath: FileManager.local().documentsDirectory(),\n      isDirectory: true\n    },\n    {\n      name: '本地媒体',\n      filePath: FileManager.local().libraryDirectory(),\n      isDirectory: true\n    },\n    {\n      name: '临时目录',\n      filePath: FileManager.local().temporaryDirectory(),\n      isDirectory: true\n    },\n    {\n      name: 'iCloud 文档',\n      filePath: FileManager.iCloud().documentsDirectory(),\n      isDirectory: true\n    },\n    {\n      name: 'iCloud 媒体',\n      filePath: FileManager.iCloud().libraryDirectory(),\n      isDirectory: true\n    }\n  ]\n})\n\n\/**\n * @typedef {object} File\n * @property {string} File.name\n * @property {string} File.info\n * @property {string} File.filePath\n * @property {boolean} File.isDirectory\n *\/\n",
  "share_sheet_inputs" : [

  ]
}
